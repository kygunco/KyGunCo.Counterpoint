// <auto-generated>

using KyGunCo.Counterpoint.Sdk.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace KyGunCo.Counterpoint.Sdk.Configuration
{
    // AR_OPN_APPLY_TO
    public class ArOpnApplyToConfiguration : IEntityTypeConfiguration<ArOpnApplyTo>
    {
        public void Configure(EntityTypeBuilder<ArOpnApplyTo> builder)
        {
            builder.ToTable("AR_OPN_APPLY_TO", "dbo");
            builder.HasKey(x => new { x.CustNo, x.DocDat, x.DocNo, x.DocTyp, x.ApplyToDocDat, x.ApplyToDocNo, x.ApplyToDocTyp }).HasName("PK_AR_OPN_APPLY_TO").IsClustered();

            builder.Property(x => x.CustNo).HasColumnName(@"CUST_NO").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15).ValueGeneratedNever();
            builder.Property(x => x.DocDat).HasColumnName(@"DOC_DAT").HasColumnType("datetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DocNo).HasColumnName(@"DOC_NO").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15).ValueGeneratedNever();
            builder.Property(x => x.DocTyp).HasColumnName(@"DOC_TYP").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1).ValueGeneratedNever();
            builder.Property(x => x.ApplyToDocDat).HasColumnName(@"APPLY_TO_DOC_DAT").HasColumnType("datetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ApplyToDocNo).HasColumnName(@"APPLY_TO_DOC_NO").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15).ValueGeneratedNever();
            builder.Property(x => x.ApplyToDocTyp).HasColumnName(@"APPLY_TO_DOC_TYP").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1).ValueGeneratedNever();
            builder.Property(x => x.EntrySeqNo).HasColumnName(@"ENTRY_SEQ_NO").HasColumnType("int").IsRequired();
            builder.Property(x => x.Amt).HasColumnName(@"AMT").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.EntdAmt).HasColumnName(@"ENTD_AMT").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.DiscntblAmt).HasColumnName(@"DISCNTBL_AMT").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.EntdDiscntblAmt).HasColumnName(@"ENTD_DISCNTBL_AMT").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.DiscAmt).HasColumnName(@"DISC_AMT").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.WrtoffAmt).HasColumnName(@"WRTOFF_AMT").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.LinIsOpn).HasColumnName(@"LIN_IS_OPN").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.LstMaintDt).HasColumnName(@"LST_MAINT_DT").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LstMaintUsrId).HasColumnName(@"LST_MAINT_USR_ID").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.LstLckDt).HasColumnName(@"LST_LCK_DT").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.RowTs).HasColumnName(@"ROW_TS").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.SelfApplied).HasColumnName(@"SELF_APPLIED").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1).ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.StmntDocTypOrder).HasColumnName(@"STMNT_DOC_TYP_ORDER").HasColumnType("int").IsRequired(false).ValueGeneratedOnAddOrUpdate();

            // Foreign keys
            builder.HasOne(a => a.ArOpnItem).WithMany(b => b.ArOpnApplyToes).HasForeignKey(c => new { c.CustNo, c.DocDat, c.DocNo, c.DocTyp }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AR_OPN_APPLY_TO_AR_OPN_ITEM");

            builder.HasIndex(x => new { x.CustNo, x.ApplyToDocDat, x.ApplyToDocNo, x.ApplyToDocTyp, x.DocDat, x.DocNo, x.DocTyp }).HasDatabaseName("AR_OPN_APPLY_TO_X1");
            builder.HasIndex(x => new { x.CustNo, x.DocDat, x.DocNo, x.DocTyp, x.EntrySeqNo }).HasDatabaseName("AR_OPN_APPLY_TO_X2");
            builder.HasIndex(x => new { x.DocDat, x.CustNo, x.DocNo, x.DocTyp, x.ApplyToDocDat, x.ApplyToDocNo, x.ApplyToDocTyp }).HasDatabaseName("AR_OPN_APPLY_TO_X3");
        }
    }

}
// </auto-generated>
