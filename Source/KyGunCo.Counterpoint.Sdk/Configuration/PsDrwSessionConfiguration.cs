// <auto-generated>

using KyGunCo.Counterpoint.Sdk.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace KyGunCo.Counterpoint.Sdk.Configuration
{
    // PS_DRW_SESSION
    public class PsDrwSessionConfiguration : IEntityTypeConfiguration<PsDrwSession>
    {
        public void Configure(EntityTypeBuilder<PsDrwSession> builder)
        {
            builder.ToTable("PS_DRW_SESSION", "dbo");
            builder.HasKey(x => new { x.StrId, x.DrwId, x.DrwSessionId }).HasName("PK_PS_DRW_SESSION").IsClustered();

            builder.Property(x => x.StrId).HasColumnName(@"STR_ID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10).ValueGeneratedNever();
            builder.Property(x => x.DrwId).HasColumnName(@"DRW_ID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10).ValueGeneratedNever();
            builder.Property(x => x.DrwSessionId).HasColumnName(@"DRW_SESSION_ID").HasColumnType("bigint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Stat).HasColumnName(@"STAT").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.IsOffline).HasColumnName(@"IS_OFFLINE").HasColumnType("bit").IsRequired();
            builder.Property(x => x.OpenDt).HasColumnName(@"OPEN_DT").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CloseDt).HasColumnName(@"CLOSE_DT").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UsrId).HasColumnName(@"USR_ID").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.RsUtcDt).HasColumnName(@"RS_UTC_DT").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.SessionNam).HasColumnName(@"SESSION_NAM").HasColumnType("varchar(30)").IsRequired().IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.OrigDrwSessionId).HasColumnName(@"ORIG_DRW_SESSION_ID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.RsStat).HasColumnName(@"RS_STAT").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.ActivdOnline).HasColumnName(@"ACTIVD_ONLINE").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AssgndSta).HasColumnName(@"ASSGND_STA").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.AssgndUsr).HasColumnName(@"ASSGND_USR").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.DrwDevInstId).HasColumnName(@"DRW_DEV_INST_ID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.WorkstationId).HasColumnName(@"WORKSTATION_ID").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DrwDevId).HasColumnName(@"DRW_DEV_ID").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);

            // Foreign keys
            builder.HasOne(a => a.PsDrw).WithMany(b => b.PsDrwSessions).HasForeignKey(c => new { c.StrId, c.DrwId }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PS_DRW_SESSION_PS_DRW");
            builder.HasOne(a => a.SyUsr).WithMany(b => b.PsDrwSessions).HasForeignKey(c => c.UsrId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PS_DRW_SESSION_SY_USR");

            builder.HasIndex(x => x.RsStat).HasDatabaseName("PS_DRW_SESSION_X_RS_STAT");
            builder.HasIndex(x => x.RsUtcDt).HasDatabaseName("PS_DRW_SESSION_X_RS_UTC_DT");
        }
    }

}
// </auto-generated>
