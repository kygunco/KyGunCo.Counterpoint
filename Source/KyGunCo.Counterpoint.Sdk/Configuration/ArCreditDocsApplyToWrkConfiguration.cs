// <auto-generated>

using KyGunCo.Counterpoint.Sdk.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace KyGunCo.Counterpoint.Sdk.Configuration
{
    // AR_CREDIT_DOCS_APPLY_TO_WRK
    public class ArCreditDocsApplyToWrkConfiguration : IEntityTypeConfiguration<ArCreditDocsApplyToWrk>
    {
        public void Configure(EntityTypeBuilder<ArCreditDocsApplyToWrk> builder)
        {
            builder.ToTable("AR_CREDIT_DOCS_APPLY_TO_WRK", "dbo");
            builder.HasKey(x => new { x.SessId, x.CustNo, x.DocDat, x.DocNo, x.DocTyp, x.ProcessActivity, x.ApplyToDocDat, x.ApplyToDocNo, x.ApplyToDocTyp }).HasName("PK_AR_CREDIT_DOCS_APPLY_TO_WRK").IsClustered();

            builder.Property(x => x.SessId).HasColumnName(@"SESS_ID").HasColumnType("varchar(40)").IsRequired().IsUnicode(false).HasMaxLength(40).ValueGeneratedNever();
            builder.Property(x => x.CustNo).HasColumnName(@"CUST_NO").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15).ValueGeneratedNever();
            builder.Property(x => x.DocDat).HasColumnName(@"DOC_DAT").HasColumnType("datetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DocNo).HasColumnName(@"DOC_NO").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15).ValueGeneratedNever();
            builder.Property(x => x.DocTyp).HasColumnName(@"DOC_TYP").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1).ValueGeneratedNever();
            builder.Property(x => x.ProcessActivity).HasColumnName(@"PROCESS_ACTIVITY").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1).ValueGeneratedNever();
            builder.Property(x => x.ApplyToDocDat).HasColumnName(@"APPLY_TO_DOC_DAT").HasColumnType("datetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ApplyToDocNo).HasColumnName(@"APPLY_TO_DOC_NO").HasColumnType("varchar(15)").IsRequired().IsUnicode(false).HasMaxLength(15).ValueGeneratedNever();
            builder.Property(x => x.ApplyToDocTyp).HasColumnName(@"APPLY_TO_DOC_TYP").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1).ValueGeneratedNever();
            builder.Property(x => x.EntrySeqNo).HasColumnName(@"ENTRY_SEQ_NO").HasColumnType("int").IsRequired();
            builder.Property(x => x.DocBalAmt).HasColumnName(@"DOC_BAL_AMT").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.DocEntdAmt).HasColumnName(@"DOC_ENTD_AMT").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.Amt).HasColumnName(@"AMT").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.EntdAmt).HasColumnName(@"ENTD_AMT").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.DiscntblAmt).HasColumnName(@"DISCNTBL_AMT").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.EntdDiscntblAmt).HasColumnName(@"ENTD_DISCNTBL_AMT").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.DiscAmt).HasColumnName(@"DISC_AMT").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.WrtoffAmt).HasColumnName(@"WRTOFF_AMT").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.RemainingAmt).HasColumnName(@"REMAINING_AMT").HasColumnType("decimal(15,2)").IsRequired(false);
            builder.Property(x => x.LinIsOpn).HasColumnName(@"LIN_IS_OPN").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.StmntDocTypOrder).HasColumnName(@"STMNT_DOC_TYP_ORDER").HasColumnType("int").IsRequired(false).ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.SelfApplied).HasColumnName(@"SELF_APPLIED").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1).ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.LinSplitFromApplyToDocDat).HasColumnName(@"LIN_SPLIT_FROM_APPLY_TO_DOC_DAT").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LinSplitFromApplyToDocNo).HasColumnName(@"LIN_SPLIT_FROM_APPLY_TO_DOC_NO").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);
            builder.Property(x => x.LinSplitFromApplyToDocTyp).HasColumnName(@"LIN_SPLIT_FROM_APPLY_TO_DOC_TYP").HasColumnType("varchar(1)").IsRequired(false).IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.LinSplitFromApplyTo).HasColumnName(@"LIN_SPLIT_FROM_APPLY_TO").HasColumnType("varchar(1)").IsRequired().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.LinSplitOriEntrySeqNo).HasColumnName(@"LIN_SPLIT_ORI_ENTRY_SEQ_NO").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LstMaintDt).HasColumnName(@"LST_MAINT_DT").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LstMaintUsrId).HasColumnName(@"LST_MAINT_USR_ID").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.LstLckDt).HasColumnName(@"LST_LCK_DT").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.RowTs).HasColumnName(@"ROW_TS").HasColumnType("timestamp").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.ArCreditDocsWrk).WithMany(b => b.ArCreditDocsApplyToWrks).HasForeignKey(c => new { c.SessId, c.CustNo, c.DocDat, c.DocNo, c.DocTyp, c.ProcessActivity }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AR_CREDIT_DOCS_APPLY_TO_WRK_AR_CREDIT_DOCS_WRK");

            builder.HasIndex(x => new { x.SessId, x.CustNo, x.ApplyToDocDat, x.ApplyToDocNo, x.ApplyToDocTyp, x.DocDat, x.DocNo, x.DocTyp, x.ProcessActivity }).HasDatabaseName("AR_CREDIT_DOCS_APPLY_TO_WRK_X1");
            builder.HasIndex(x => new { x.SessId, x.CustNo, x.DocDat, x.DocNo, x.DocTyp, x.EntrySeqNo, x.ProcessActivity, x.ApplyToDocDat, x.ApplyToDocNo, x.ApplyToDocTyp }).HasDatabaseName("AR_CREDIT_DOCS_APPLY_TO_WRK_X2");
            builder.HasIndex(x => new { x.SessId, x.DocDat, x.CustNo, x.DocNo, x.DocTyp, x.ProcessActivity, x.ApplyToDocDat, x.ApplyToDocNo, x.ApplyToDocTyp }).HasDatabaseName("AR_CREDIT_DOCS_APPLY_TO_WRK_X3");
        }
    }

}
// </auto-generated>
